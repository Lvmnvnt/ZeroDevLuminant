{"version":3,"file":"create-client.js","sourceRoot":"","sources":["../../../../src/kernel-zerodev/client/create-client.ts"],"names":[],"mappings":";;;AAAA,8CAK0B;AAC1B,+BAAoE;AACpE,kDAAgE;AAYhE,SAAS,0BAA0B,CACjC,QAAgB;IAEhB,OACE;QACE,uBAAuB;QACvB,8BAA8B;QAC9B,6BAA6B;QAC7B,4BAA4B;QAC5B,0BAA0B;QAC1B,0BAA0B;QAC1B,8BAA8B;QAC9B,kCAAkC;KAErC,CAAC,QAAQ,CAAC,QAAqC,CAAC,CAAC;AACpD,CAAC;AAEM,MAAM,gCAAgC,GAAG,CAAC,EAC/C,KAAK,EACL,MAAM,EACN,SAAS,EACT,eAAe,GACK,EAAsC,EAAE;IAC5D,MAAM,gBAAgB,GAAG,IAAA,WAAI,EAAC,MAAM,EAAE;QACpC,YAAY,EAAE;YAEZ,OAAO,EAAE,MAAM,KAAK,0BAAW,CAAC,CAAC,CAAC,EAAE,SAAS,EAAE,eAAe,EAAE,CAAC,CAAC,CAAC,EAAE;SACtE;QACD,IAAI,EAAE,2BAA2B;QACjC,GAAG,EAAE,2BAA2B;QAChC,UAAU,EAAE,CAAC;QACb,OAAO,EAAE,KAAK;KACf,CAAC,CAAC;IACH,MAAM,eAAe,GAAG,IAAA,WAAI,EAAC,+BAAgB,CAAC,KAAK,CAAC,EAAE,CAAC,CAAC,CAAC;IACzD,IAAI,MAAM,GAAG,IAAA,uCAA6B,EACxC,IAAA,yBAAkB,EAAC;QACjB,KAAK;QACL,SAAS,EAAE,IAAA,aAAM,EAAC;YAChB,KAAK,CAAC,OAAO,CAAC,EAAE,MAAM,EAAE,MAAM,EAAE;gBAC9B,IAAI,QAAQ,CAAC;gBACb,IAAI,0BAA0B,CAAC,MAAM,CAAC,EAAE;oBACtC,QAAQ,GAAG,MAAM,gBAAgB,CAAC,EAAE,KAAK,EAAE,CAAC,CAAC,OAAO,CAAC;wBACnD,MAAM;wBACN,MAAM;qBACA,CAAC,CAAC;iBACX;qBAAM;oBACL,QAAQ,GAAG,MAAM,eAAe,CAAC,EAAE,KAAK,EAAE,CAAC,CAAC,OAAO,CAAC;wBAClD,MAAM;wBACN,MAAM;qBACA,CAAC,CAAC;iBACX;gBACD,OAAO,QAAQ,CAAC;YAClB,CAAC;SACF,CAAC;KACH,CAAC,CACH,CAAC;IAEF,OAAO,MAAuD,CAAC;AACjE,CAAC,CAAC;AAzCW,QAAA,gCAAgC,oCAyC3C","sourcesContent":["import {\n  createPublicErc4337FromClient,\n  type PublicErc4337Client,\n  type Erc337RpcSchema,\n  type HttpTransport,\n} from \"@alchemy/aa-core\";\nimport { http, createPublicClient, type Chain, custom } from \"viem\";\nimport { BUNDLER_URL, CHAIN_ID_TO_NODE } from \"../constants.js\";\nimport type { PaymasterAndBundlerProviders } from \"../paymaster/types.js\";\n\ninterface ZeroDevClientConfig {\n  chain: Chain;\n  projectId: string;\n  rpcUrl?: string;\n  bundlerProvider?: PaymasterAndBundlerProviders;\n}\n\ntype MethodsOfErc4337RpcSchema = Erc337RpcSchema[number][\"Method\"];\n\nfunction isMethodInErc4337RpcSchema(\n  variable: string\n): variable is MethodsOfErc4337RpcSchema {\n  return (\n    [\n      \"eth_sendUserOperation\",\n      \"eth_estimateUserOperationGas\",\n      \"eth_getUserOperationReceipt\",\n      \"eth_getUserOperationByHash\",\n      \"eth_supportedEntryPoints\",\n      \"eth_maxPriorityFeePerGas\",\n      \"rundler_maxPriorityFeePerGas\",\n      \"pimlico_getUserOperationGasPrice\",\n    ] as const\n  ).includes(variable as MethodsOfErc4337RpcSchema);\n}\n\nexport const createZeroDevPublicErc4337Client = ({\n  chain,\n  rpcUrl,\n  projectId,\n  bundlerProvider,\n}: ZeroDevClientConfig): PublicErc4337Client<HttpTransport> => {\n  const erc4337Transport = http(rpcUrl, {\n    fetchOptions: {\n      // @ts-ignore\n      headers: rpcUrl === BUNDLER_URL ? { projectId, bundlerProvider } : {},\n    },\n    name: \"Connected bundler network\",\n    key: \"connected-bundler-network\",\n    retryCount: 0,\n    timeout: 35000,\n  });\n  const publicTransport = http(CHAIN_ID_TO_NODE[chain.id]);\n  let client = createPublicErc4337FromClient(\n    createPublicClient({\n      chain,\n      transport: custom({\n        async request({ method, params }) {\n          let response;\n          if (isMethodInErc4337RpcSchema(method)) {\n            response = await erc4337Transport({ chain }).request({\n              method,\n              params,\n            } as any);\n          } else {\n            response = await publicTransport({ chain }).request({\n              method,\n              params,\n            } as any);\n          }\n          return response;\n        },\n      }),\n    })\n  );\n\n  return client as unknown as PublicErc4337Client<HttpTransport>;\n};\n"]}